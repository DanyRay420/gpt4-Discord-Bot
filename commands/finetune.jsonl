{"prompt": "\n\nfilename:\n```\napp/downloads/sample_database_2.csv\n```\n\ncolumns:\n```\nAge              int64\nHome State      object\nEducation       object\nEye Color       object\nAttribute 1      int64\nAttribute 2      int64\nAttribute 3      int64\nAttribute 4      int64\nAttribute 5      int64\nAttribute 6      int64\nAttribute 7      int64\nAttribute 8      int64\nAttribute 9      int64\nAttribute 10     int64\ndtype: object\n```\n\nFirst 3 rows:\n```\n   Age   Home State    Education Eye Color  Attribute 1  Attribute 2  Attribute 3  Attribute 4  Attribute 5  Attribute 6  Attribute 7  Attribute 8  Attribute 9  Attribute 10\n0   56     Delaware  High School      Blue            0            0            1            1            1            1            0            0            0             0\n1   46  Mississippi          PhD     Hazel            1            1            0            0            0            1            0            0            1             0\n2   32       Hawaii  High School     Hazel            0            0            1            0            1            1            1            0            0             1\n```\n\nrequest:\n```\ncreate a state choropleth leaflet containing the number of people who reside in each state.\n```\n\n", "completion": "\nimport pandas as pd\nimport geopandas as gpd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the us-states.json file into a GeoDataFrame\ngdf = gpd.read_file('app/geojsons/us-states.json')\n\n# Group by state and count the number of people\nstate_data = data.groupby('Home State').size().reset_index(name='Count')\n\n# Merge data with gdf on state column\nmerged_data = gdf.merge(state_data, left_on='name', right_on='Home State')\n\n# Create a choropleth map to show the count in each state\nm = folium.Map(location=[37, -102], zoom_start=4)\n\nfolium.Choropleth(\n    geo_data=merged_data,\n    name='choropleth',\n    data=merged_data,\n    columns=['Home State', 'Count'],\n    key_on='feature.properties.name',\n    fill_color='YlGnBu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Number of People'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/state_choropleth.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/iris_dataset.csv\n```\n\ncolumns:\n```\nsepal_length    float64\nsepal_width     float64\npetal_length    float64\npetal_width     float64\nspecies          object\ndtype: object\n```\n\nFirst 3 rows:\n```\n   sepal_length  sepal_width  petal_length  petal_width species\n0           5.1          3.5           1.4          0.2  setosa\n1           4.9          3.0           1.4          0.2  setosa\n2           4.7          3.2           1.3          0.2  setosa\n```\n\nrequest:\n```\nCreate a pair plot using this data.\n```\n\n", "completion": "\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.style.use('dark_background')\n\n# Assuming your data is in a DataFrame called `data`\n# Load the iris dataset\ndata = pd.read_csv('app/downloads/iris_dataset.csv')\n\n# Create a pair plot\nsns.pairplot(data, hue='species')\n\n# Set variable filename (required)\nfilename = \"app/downloads/pair_plot.png\"\n# Save the pair plot as an image file\nplt.savefig(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/titanic_dataset.csv\n```\n\ncolumns:\n```\nsurvived         int64\npclass           int64\nsex             object\nage            float64\nsibsp            int64\nparch            int64\nfare           float64\nembarked        object\nclass           object\nwho             object\nadult_male        bool\ndeck            object\nembark_town     object\nalive           object\nalone             bool\ndtype: object\n```\n\nFirst 3 rows:\n```\n   survived  pclass     sex   age  sibsp  parch     fare embarked  class    who  adult_male deck  embark_town alive  alone\n0         0       3    male  22.0      1      0   7.2500        S  Third    man        True  NaN  Southampton    no  False\n1         1       1  female  38.0      1      0  71.2833        C  First  woman       False    C    Cherbourg   yes  False\n2         1       3  female  26.0      0      0   7.9250        S  Third  woman       False  NaN  Southampton   yes   True\n```\n\nrequest:\n```\nWho are the youngest passengers who died?\n```\n\n", "completion": "\nimport pandas as pd\n\n# Assuming your data is in a DataFrame called `data`\n# Load the Titanic dataset\ndata = pd.read_csv('app/downloads/titanic_dataset.csv')\n\n# Filter the dataset to get the youngest passengers who died\nyoungest_passengers_died = data[data['survived'] == 0].sort_values('age').head()\n\n# Print the results\nprint(youngest_passengers_died.to_string())\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/titanic_dataset.csv\n```\n\ncolumns:\n```\nsurvived         int64\npclass           int64\nsex             object\nage            float64\nsibsp            int64\nparch            int64\nfare           float64\nembarked        object\nclass           object\nwho             object\nadult_male        bool\ndeck            object\nembark_town     object\nalive           object\nalone             bool\ndtype: object\n```\n\nFirst 3 rows:\n```\n   survived  pclass     sex   age  sibsp  parch     fare embarked  class    who  adult_male deck  embark_town alive  alone\n0         0       3    male  22.0      1      0   7.2500        S  Third    man        True  NaN  Southampton    no  False\n1         1       1  female  38.0      1      0  71.2833        C  First  woman       False    C    Cherbourg   yes  False\n2         1       3  female  26.0      0      0   7.9250        S  Third  woman       False  NaN  Southampton   yes   True\n```\n\nrequest:\n```\nWho are the oldest passengers who died?\n```\n\n", "completion": "\nimport pandas as pd\n\n# Assuming your data is in a DataFrame called `data`\n# Load the Titanic dataset\ndata = pd.read_csv('app/downloads/titanic_dataset.csv')\n\n# Filter the dataset to get the youngest passengers who died\nyoungest_passengers_died = data[data['survived'] == 0].sort_values('age', ascending=False).head()\n\n# Print the results\nprint(youngest_passengers_died.to_string())\n\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/sample_database_2.csv\n```\n\ncolumns:\n```\nAge              int64\nHome State      object\nEducation       object\nEye Color       object\nAttribute 1      int64\nAttribute 2      int64\nAttribute 3      int64\nAttribute 4      int64\nAttribute 5      int64\nAttribute 6      int64\nAttribute 7      int64\nAttribute 8      int64\nAttribute 9      int64\nAttribute 10     int64\ndtype: object\n```\n\nFirst 3 rows:\n```\n   Age   Home State    Education Eye Color  Attribute 1  Attribute 2  Attribute 3  Attribute 4  Attribute 5  Attribute 6  Attribute 7  Attribute 8  Attribute 9  Attribute 10\n0   56     Delaware  High School      Blue            0            0            1            1            1            1            0            0            0             0\n1   46  Mississippi          PhD     Hazel            1            1            0            0            0            1            0            0            1             0\n2   32       Hawaii  High School     Hazel            0            0            1            0            1            1            1            0            0             1\n```\n\nrequest:\n```\nWho has blue eyes?\n```\n\n", "completion": "\n\nimport pandas as pd\n\n# Assuming your data is in a DataFrame called `data`\n# Load the sample database\ndata = pd.read_csv('app/downloads/sample_database_2.csv')\n\n# Filter the dataset to get the people with blue eyes\npeople_with_blue_eyes = data[data['Eye Color'] == 'Blue']\n\n# Print the results\nprint(people_with_blue_eyes.to_string())\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/titanic_dataset.csv\n```\n\ncolumns:\n```\nsurvived         int64\npclass           int64\nsex             object\nage            float64\nsibsp            int64\nparch            int64\nfare           float64\nembarked        object\nclass           object\nwho             object\nadult_male        bool\ndeck            object\nembark_town     object\nalive           object\nalone             bool\ndtype: object\n```\n\nFirst 3 rows:\n```\n   survived  pclass     sex   age  sibsp  parch     fare embarked  class    who  adult_male deck  embark_town alive  alone\n0         0       3    male  22.0      1      0   7.2500        S  Third    man        True  NaN  Southampton    no  False\n1         1       1  female  38.0      1      0  71.2833        C  First  woman       False    C    Cherbourg   yes  False\n2         1       3  female  26.0      0      0   7.9250        S  Third  woman       False  NaN  Southampton   yes   True\n```\n\nrequest:\n```\ncreate a plotly histogram for age of survivors and dead.\n```\n\n", "completion": "\nimport pandas as pd\nimport plotly.express as px\n\n# Assuming your data is in a DataFrame called `data`\n# Load the Titanic dataset\ndata = pd.read_csv('app/downloads/titanic_dataset.csv')\n\n# Set the dark theme using plotly\npx.defaults.template = \"plotly_dark\"\n\n# Create a histogram for age of survivors and dead\nfig = px.histogram(data, x=\"age\", color=\"survived\", nbins=30)\n\n# Save the figure\n# Set save filename\nsave_filename = \"app/downloads/titanic_plotly.html\"\nfig.write_html(save_filename)\n\n# Show the plot\nfig.show()\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/sample_database_2.csv\n```\n\ncolumns:\n```\nAge              int64\nHome State      object\nEducation       object\nEye Color       object\nAttribute 1      int64\nAttribute 2      int64\nAttribute 3      int64\nAttribute 4      int64\nAttribute 5      int64\nAttribute 6      int64\nAttribute 7      int64\nAttribute 8      int64\nAttribute 9      int64\nAttribute 10     int64\ndtype: object\n```\n\nrequest:\n```\nCreate a state choropleth leaflet.\n```\n\n", "completion": "\nimport pandas as pd\nimport geopandas as gpd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the us-states.json file into a GeoDataFrame\ngdf = gpd.read_file('app/geojsons/us-states.json')\n\n# Group by state and count the number of cases\nstate_data = data.groupby('Home State').size().reset_index(name='Count')\n\n# Merge data with gdf on state column\nmerged_data = gdf.merge(state_data, left_on='name', right_on='Home State')\n\n# Create a choropleth map to show the count in each state\nm = folium.Map(location=[37, -102], zoom_start=4)\n\nfolium.Choropleth(\n    geo_data=merged_data,\n    name='choropleth',\n    data=merged_data,\n    columns=['Home State', 'Count'],\n    key_on='feature.properties.name',\n    fill_color='YlGnBu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Count'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/state_choropleth.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/titanic_dataset.csv\n```\n\ncolumns:\n```\nsurvived         int64\npclass           int64\nsex             object\nage            float64\nsibsp            int64\nparch            int64\nfare           float64\nembarked        object\nclass           object\nwho             object\nadult_male        bool\ndeck            object\nembark_town     object\nalive           object\nalone             bool\ndtype: object\n```\n\nFirst 3 rows:\n```\n   survived  pclass     sex   age  sibsp  parch     fare embarked  class    who  adult_male deck  embark_town alive  alone\n0         0       3    male  22.0      1      0   7.2500        S  Third    man        True  NaN  Southampton    no  False\n1         1       1  female  38.0      1      0  71.2833        C  First  woman       False    C    Cherbourg   yes  False\n2         1       3  female  26.0      0      0   7.9250        S  Third  woman       False  NaN  Southampton   yes   True\n```\n\nrequest:\n```\nCreate an interactive histogram showing survivors and dead for males and females. Save the `.html` file and then `.show()` the figure.\n```\n\n", "completion": "\n\nimport pandas as pd\nimport plotly.express as px\n\n# Assuming your data is in a DataFrame called `data`\n# Load the Titanic dataset\ndata = pd.read_csv('app/downloads/titanic_dataset.csv')\n\n# Set the dark theme using matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\n\n# Create an interactive histogram showing survivors and dead for males and females\nfig = px.histogram(data, x=\"sex\", color=\"survived\", barmode=\"group\")\n\n# Save the figure as an HTML file\nfilename = \"app/downloads/titanic_histogram.html\"\nfig.write_html(filename)\n\n# Show the figure\nfig.show()\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/sample_dataset.csv\n```\n\ncolumns:\n```\nLatitude         float64\nLongitude        float64\nBusiness Type     object\ndtype: object\n```\n\nFirst 3 rows:\n```\n    Latitude   Longitude Business Type\n0  26.178626  -86.813786    Restaurant\n1  32.382985  -97.108596  Retail Store\n2  33.379966 -107.710758           Gym\n```\n\nrequest:\n```\ncreate a folium map using latitude and longitude. Use red circle markers of radius 6.\n```\n\n", "completion": "\nimport pandas as pd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the sample dataset\ndata = pd.read_csv('app/downloads/sample_dataset.csv')\n\n# Create a folium map centered on the first latitude and longitude\nm = folium.Map(location=[data['Latitude'].iloc[0], data['Longitude'].iloc[0]], zoom_start=10)\n\n# Add red circle markers for each latitude and longitude\nfor index, row in data.iterrows():\n    folium.CircleMarker(\n        location=[row['Latitude'], row['Longitude']],\n        radius=6,\n        color='red',\n        fill=True,\n        fill_color='red'\n    ).add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/folium_map.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/sample_dataset.csv\n```\n\ncolumns:\n```\nLatitude         float64\nLongitude        float64\nBusiness Type     object\ndtype: object\n```\n\nFirst 3 rows:\n```\n    Latitude   Longitude Business Type\n0  26.178626  -86.813786    Restaurant\n1  32.382985  -97.108596  Retail Store\n2  33.379966 -107.710758           Gym\n```\n\nrequest:\n```\ncreate a folium map using latitude and longitude. Use red circle markers of radius 6. Add the type of business to the tooltip.\n```\n\n", "completion": "\nimport pandas as pd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the sample dataset\ndata = pd.read_csv('app/downloads/sample_dataset.csv')\n\n# Create a folium map centered at the mean latitude and longitude\nm = folium.Map(location=[data['Latitude'].mean(), data['Longitude'].mean()], zoom_start=4)\n\n# Add red circle markers to the map\nfor index, row in data.iterrows():\n    folium.CircleMarker(\n        location=[row['Latitude'], row['Longitude']],\n        radius=6,\n        color='red',\n        fill=True,\n        fill_color='red',\n        fill_opacity=0.6,\n        tooltip=row['Business Type']\n    ).add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/folium_map.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/state_population_counts.csv\n```\n\ncolumns:\n```\nState         object\nPopulation     int64\ndtype: object\n```\n\nFirst 3 rows:\n```\n     State  Population\n0  Alabama     7423388\n1   Alaska     7550634\n2  Arizona     5304572\n```\n\nrequest:\n```\nCreate a state choropleth, colored by the population count.\n```\n\n", "completion": "\nimport pandas as pd\nimport geopandas as gpd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the us-states.json file into a GeoDataFrame\ngdf = gpd.read_file('app/geojsons/us-states.json')\n\n# Load the state population counts\nstate_population = pd.read_csv('app/downloads/state_population_counts.csv')\n\n# Merge data with gdf on state column\nmerged_data = gdf.merge(state_population, left_on='name', right_on='State')\n\n# Create a choropleth map to show the population count in each state\nm = folium.Map(location=[37, -102], zoom_start=4)\n\nfolium.Choropleth(\n    geo_data=merged_data,\n    name='choropleth',\n    data=merged_data,\n    columns=['State', 'Population'],\n    key_on='feature.properties.name',\n    fill_color='YlGnBu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Population Count'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/state_population_choropleth.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/state_population_counts.csv\n```\n\ncolumns:\n```\nState         object\nPopulation     int64\ndtype: object\n```\n\nFirst 3 rows:\n```\n     State  Population\n0  Alabama     7423388\n1   Alaska     7550634\n2  Arizona     5304572\n```\n\nrequest:\n```\nCan you sector off the United States into `North, North East, East, South Easth`, etc, and calculate the total population?\n```\n\n", "completion": "\nimport pandas as pd\n\n# Assuming your data is in a DataFrame called `data`\n# Load the state population counts\ndata = pd.read_csv('app/downloads/state_population_counts.csv')\n\n# Create a dictionary to map states to regions\nregion_mapping = {\n    'North': ['Connecticut', 'Maine', 'Massachusetts', 'New Hampshire', 'Rhode Island', 'Vermont'],\n    'North East': ['Delaware', 'Maryland', 'New Jersey', 'New York', 'Pennsylvania'],\n    'East': ['District of Columbia', 'Florida', 'Georgia', 'North Carolina', 'South Carolina', 'Virginia', 'West Virginia'],\n    'South East': ['Alabama', 'Arkansas', 'Kentucky', 'Louisiana', 'Mississippi', 'Tennessee'],\n    'South': ['Oklahoma', 'Texas'],\n    'Mid West': ['Illinois', 'Indiana', 'Iowa', 'Kansas', 'Michigan', 'Minnesota', 'Missouri', 'Nebraska', 'North Dakota', 'Ohio', 'South Dakota', 'Wisconsin'],\n    'West': ['Arizona', 'Colorado', 'Idaho', 'Montana', 'Nevada', 'New Mexico', 'Utah', 'Wyoming'],\n    'Pacific': ['Alaska', 'California', 'Hawaii', 'Oregon', 'Washington']\n}\n\n# Create a new column for regions\ndata['Region'] = data['State'].map({state: region for region, states in region_mapping.items() for state in states})\n\n# Calculate the total population by region\ntotal_population_by_region = data.groupby('Region')['Population'].sum().reset_index()\n\n# Save the total population by region as a CSV file\nfilename = \"app/downloads/total_population_by_region.csv\"\ntotal_population_by_region.to_csv(filename, index=False)\n\n# Show the total population by region\ntotal_population_by_region\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/business_listings.csv\n```\n\ncolumns:\n```\nBusiness Name        object\nType of Business     object\nLatitude            float64\nLongitude           float64\nOpen                   bool\ndtype: object\n```\n\nFirst 3 rows:\n```\n  Business Name Type of Business   Latitude  Longitude   Open\n0    Business 0            Salon  40.712091 -73.785713   True\n1    Business 1            Salon  40.439328 -73.573209  False\n2    Business 2            Salon  40.423729 -73.551146   True\n```\n\nrequest:\n```\nMark the location of each business on a leaflet using circle markers colored by whether they are currently open or not.\n```\n\n", "completion": "\nimport pandas as pd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the business listings dataset\ndata = pd.read_csv('app/downloads/business_listings.csv')\n\n# Create a folium map centered at the mean latitude and longitude\nm = folium.Map(location=[data['Latitude'].mean(), data['Longitude'].mean()], zoom_start=10)\n\n# Add circle markers to the map\nfor index, row in data.iterrows():\n    color = 'green' if row['Open'] else 'red'\n    folium.CircleMarker(\n        location=[row['Latitude'], row['Longitude']],\n        radius=6,\n        color=color,\n        fill=True,\n        fill_color=color,\n        fill_opacity=0.6,\n        tooltip=row['Business Name']\n    ).add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/business_map.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/chicago_homicide_data_1.csv\n```\n\ncolumns:\n```\nid                        int64\ncase_number              object\ndate                     object\nblock                    object\niucr                      int64\nprimary_type             object\ndescription              object\nlocation_description     object\narrest                     bool\ndomestic                   bool\nbeat                      int64\ndistrict                  int64\nward                      int64\ncommunity_area            int64\nfbi_code                 object\nx_coordinate            float64\ny_coordinate            float64\nyear                      int64\nupdated_on               object\nlatitude                float64\nlongitude               float64\nlocation                 object\ndtype: object\n```\n\nFirst 3 rows:\n```\n      id case_number                     date                 block  iucr primary_type          description location_description  arrest  domestic  beat  district  ward  community_area fbi_code  x_coordinate  y_coordinate  year               updated_on   latitude  longitude                                                                                                                            location\n0  27595    JG320179  2023-06-28T23:04:00.000    036XX N KEDZIE AVE   110     HOMICIDE  FIRST DEGREE MURDER                ALLEY    True     False  1733        17    33              16      01A     1154405.0     1924119.0  2023  2023-07-06T16:46:09.000  41.947608 -87.707847  {'latitude': '41.947607802', 'longitude': '-87.707846683', 'human_address': '{\"address\": \"\", \"city\": \"\", \"state\": \"\", \"zip\": \"\"}'}\n1  27600    JG321314  2023-06-29T19:40:00.000   066XX S STEWART AVE   110     HOMICIDE  FIRST DEGREE MURDER               STREET   False     False   722         7     6              68      01A     1174775.0     1860707.0  2023  2023-07-06T16:48:39.000  41.773168 -87.634868  {'latitude': '41.773168477', 'longitude': '-87.634868256', 'human_address': '{\"address\": \"\", \"city\": \"\", \"state\": \"\", \"zip\": \"\"}'}\n2  27597    JG313398  2023-06-29T07:00:00.000  049XX S KILBOURN AVE   110     HOMICIDE  FIRST DEGREE MURDER               STREET   False     False   815         8    14              57      01A     1147193.0     1871572.0  2023  2023-07-06T16:48:39.000  41.803554 -87.735701  {'latitude': '41.803553993', 'longitude': '-87.735701327', 'human_address': '{\"address\": \"\", \"city\": \"\", \"state\": \"\", \"zip\": \"\"}'}\n```\n\nrequest:\n```\nplot the cities homicides on a map using red circle markers. Can you add the description to the text I see when I hover over a marker?\n```\n\n", "completion": "\nimport pandas as pd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the Chicago homicide dataset\ndata = pd.read_csv('app/downloads/chicago_homicide_data_1.csv')\n\n# Create a folium map centered at the mean latitude and longitude\nm = folium.Map(location=[data['latitude'].mean(), data['longitude'].mean()], zoom_start=10)\n\n# Add red circle markers to the map\nfor index, row in data.iterrows():\n    folium.CircleMarker(\n        location=[row['latitude'], row['longitude']],\n        radius=6,\n        color='red',\n        fill=True,\n        fill_color='red',\n        fill_opacity=0.6,\n        tooltip=row['description']\n    ).add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/homicide_map.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/state_population_counts.csv\n```\n\ncolumns:\n```\nState         object\nPopulation     int64\ndtype: object\n```\n\nFirst 3 rows:\n```\n     State  Population\n0  Alabama     7423388\n1   Alaska     7550634\n2  Arizona     5304572\n```\n\nrequest:\n```\ncreate a map and color in the states by the population size. Add the name of the state and population size to the hover tooltip.\n```\n\n", "completion": "\n\nimport pandas as pd\nimport geopandas as gpd\nimport folium\n\n# Assuming your data is in a DataFrame called `data`\n# Load the us-states.json file into a GeoDataFrame\ngdf = gpd.read_file('app/geojsons/us-states.json')\n\n# Merge data with gdf on state column\nmerged_data = gdf.merge(data, left_on='name', right_on='State')\n\n# Create a choropleth map to show the population in each state\nm = folium.Map(location=[37, -102], zoom_start=4)\n\nchoropleth = folium.Choropleth(\n    geo_data=merged_data,\n    name='choropleth',\n    data=merged_data,\n    columns=['State', 'Population'],\n    key_on='feature.properties.name',\n    fill_color='YlGnBu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Population'\n).add_to(m)\n\n# Add hover functionality\nstyle_function = lambda x: {'fillColor': '#ffffff', 'color':'#000000', 'fillOpacity': 0.1, 'weight': 0.1}\nhighlight_function = lambda x: {'fillColor': '#000000', 'color':'#000000', 'fillOpacity': 0.50, 'weight': 0.1}\nNIL = folium.features.GeoJson(\n    merged_data,\n    style_function=style_function, \n    control=False,\n    highlight_function=highlight_function, \n    tooltip=folium.features.GeoJsonTooltip(\n        fields=['State','Population'],\n        aliases=['State: ','Population: '],\n        style=(\"background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;\") \n    )\n)\nm.add_child(NIL)\nm.keep_in_front(NIL)\nfolium.LayerControl().add_to(m)\n\n# Set variable filename (required)\nfilename = \"app/downloads/state_population_choropleth.html\"\n# Save the map as an HTML file\nm.save(filename)\n\n# Open the HTML file in a web browser to view the map\nimport webbrowser\nwebbrowser.open(filename)\n"}
{"prompt": "\n\ntake `app/downloads/customer_statement-10_24_2021.txt` and save to `filename=app/downloads/customer_statement.txt`, but wrap the text to text width 65.\n\nfilename:\n```\napp/downloads/customer_statement-10_24_2021.txt\n```\n\nfiletype:\n```\n.txt\n```\n            \n", "completion": "\n\nimport textwrap\n\n# Read the content of the file\nwith open('app/downloads/customer_statement-10_24_2021.txt', 'r') as file:\n    content = file.read()\n\n# Wrap the text to text width 65\nwrapped_content = textwrap.fill(content, width=65)\n\n# Write the wrapped text to a new file\nfilename = \"app/downloads/customer_statement.txt\"\nwith open(filename, 'w') as file:\n    file.write(wrapped_content)\n"}
{"prompt": "Save the titanic dataset to a csv file. Make sure to import seaborn as sns", "completion": "\nimport seaborn as sns\nimport pandas as pd\n\n# Load the Titanic dataset from seaborn\ntitanic_data = sns.load_dataset('titanic')\n\n# Save the Titanic dataset to a CSV file\nfilename = 'app/downloads/titanic_dataset.csv'\ntitanic_data.to_csv(filename, index=False)\n"}
{"prompt": "Can you create a candlestick chart of Tesla's stock price with volume bars for the past six months.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport mplfinance as mpf\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"TSLA\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as six months ago from today\nstart_date = end_date - timedelta(days=180)\n\n# Fetch the historical data for Tesla using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Tesla's brand colors\ncolors = ['#E82127', '#FABD42', '#6E6E6E', '#BFBFBF']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the candlestick chart for Tesla stock price for the past six months\nfilename = \"app/downloads/Tesla_candlestick.png\"\nmpf.plot(data, type='candle', style='yahoo', title=\"Tesla Stock Price (Last Six Months)\", ylabel=\"Stock Price (USD)\",\n         figsize=(chart_width, chart_height), savefig=dict(fname=filename, dpi=300, bbox_inches='tight'), volume=True)\nplt.close()\n"}
{"prompt": "Can you create a candlestick chart of Microsoft's stock price for the past three quarters? Add bars for volume as well.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport mplfinance as mpf\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"MSFT\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as three quarters (nine months) ago\nstart_date = end_date - timedelta(days=270)\n\n# Fetch the historical data for Microsoft using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Microsoft's brand colors\ncolors = ['#3C6EB4', '#FFB900', '#B4009E', '#00A300']\nsns.set_palette(sns.color_palette(colors))\n\n# Set fivethirtyeight background theme for the plot using Matplotlib\nplt.style.use('fivethirtyeight')\n\n# Plot the candlestick chart for Microsoft stock price for the past three quarters\nfilename = \"app/downloads/Microsoft_candlestick.png\"\nmpf.plot(data, type='candle', style='yahoo', title=\"Microsoft Stock Price (Last Three Quarters)\", ylabel=\"Stock Price (USD)\",\n         figsize=(chart_width, chart_height), savefig=dict(fname=filename, dpi=300, bbox_inches='tight'))\nplt.close()\n"}
{"prompt": "Can you create a candlestick chart for Apple's stock price in the past 128 days? Add bars for volume.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport mplfinance as mpf\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"AAPL\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as 128 days ago from today\nstart_date = end_date - timedelta(days=128)\n\n# Fetch the historical data for Apple using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Apple's brand colors\ncolors = ['#b6b6b6', '#999999', '#e9e9e9', '#d8d8d8']\nsns.set_palette(sns.color_palette(colors))\n\n# Set fivethirtyeight background theme for the plot using Matplotlib\nplt.style.use('fivethirtyeight')\n\n# Plot the candlestick chart for Apple stock price for the past three quarters\nfilename = \"app/downloads/Apple_candlestick.png\"\nmpf.plot(data, type='candle', style='yahoo', title=\"Apple Stock Price (Last 128 days)\", ylabel=\"Stock Price (USD)\",\n         figsize=(chart_width, chart_height), savefig=dict(fname=filename, dpi=300, bbox_inches='tight'), volume=True)\nplt.close()\n"}
{"prompt": "can you plot percent price change for bitcoin, ethereum, and dogecoin for the past three quarters? Use a dark theme, orange for bitcoin, light blue for ethereum, and yellow for dogecoin.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"BTC-USD\", \"ETH-USD\", \"DOGE-USD\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as three quarters (nine months) ago\nstart_date = end_date - timedelta(days=365)\n\n# Fetch the historical data for Bitcoin, Ethereum, and Dogecoin using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Calculate the percent change for each cryptocurrency\npercent_change = data.pct_change()\n\n# Set a dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the percent change for Bitcoin, Ethereum, and Dogecoin for the past three quarters\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\nplt.plot(percent_change.index, percent_change[tickers[0]], label=\"Bitcoin\", color='orange')\nplt.plot(percent_change.index, percent_change[tickers[1]], label=\"Ethereum\", color='lightblue')\nplt.plot(percent_change.index, percent_change[tickers[2]], label=\"Dogecoin\", color='yellow')\n\nplt.title(\"Percent Change in Cryptocurrency Prices (Last Three Quarters)\", fontsize=16, fontweight='bold', color=\"#FFFFFF\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#FFFFFF\")\nplt.ylabel(\"Percent Change\", fontsize=14, color=\"#FFFFFF\")\nplt.legend()\n\nplt.tight_layout()\nfilename = \"app/downloads/bitcoin_ethereum_dogecoin_three_quarters.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot the price of Microsoft and Apple together? Can you add a line of best fit for the pair?", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"MSFT\", \"AAPL\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as four quarters (three months) ago\nstart_date = end_date - timedelta(days=365)\n\n# Fetch the historical data for Microsoft and Apple using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Set a custom color palette inspired by Microsoft and Apple's brand colors\ncolors = ['#3C6EB4', '#FFB900']\nsns.set_palette(sns.color_palette(colors))\n\n# Calculate the start date as two quarters (six months) ago\nstart_date_two_quarters_ago = end_date - timedelta(days=182)\n\n# Filter the historical data for Microsoft and Apple for the past two quarters \ndata_two_quarters = data[data.index.to_series() > start_date_two_quarters_ago]\n\n# Take our dates as X. Convert datetime to numerical values.\nX = pd.DataFrame((data_two_quarters.index - start_date_two_quarters_ago).days)\n\n# Take the average of the \"Close\" prices for Microsoft and Apple as Y\ny = pd.Series(data_two_quarters.mean(axis=1))\n\n# Fit a linear regression model\nregressor = LinearRegression()\nregressor.fit(X, y)\n\n# Predict the stock prices using the linear regression model\npredicted_prices = regressor.predict(X)\n\n# Set fivethirtyeight background theme for the plot using Matplotlib\nplt.style.use('fivethirtyeight')\n\n# start figure\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\n\n# Plot the \"Close\" price for Microsoft and Apple for the past two quarters\nplt.plot(data.index, data[tickers[0]], label=\"Microsoft (MSFT)\")\nplt.plot(data.index, data[tickers[1]], label=\"Apple (AAPL)\")\n\n# Plot the linear regression line\nplt.plot(data_two_quarters.index, predicted_prices, color='red', linestyle='--', label='Linear Regression')\n\nplt.title(\"Microsoft and Apple Stock Prices (Last Two Quarters)\", fontsize=16, fontweight='bold', color=\"#333333\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#FFFFFF\")\nplt.ylabel(\"Stock Price (USD)\", fontsize=14, color=\"#FFFFFF\")\nplt.legend()\n\nplt.tight_layout() \nfilename = \"app/downloads/Microsoft_Apple_Two_Quarters.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Krispy Kreme's stock price for the past six months, as well as a regression line. Do not show volume and do not use candlesticks.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nimport statsmodels.api as sm\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"DNUT\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as six months ago from today\nstart_date = end_date - timedelta(days=180)\n\n# Fetch the historical data for Krispy Kreme using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Krispy Kreme's brand colors\ncolors = ['#FFB900', '#DD1100']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the stock price for Krispy Kreme for the past six months\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data['Close'], label=\"Stock Price\")\n\n# Generate regression line\nX = np.arange(len(data)).reshape(-1, 1)\nX = sm.add_constant(X)\ny = data['Close'].values\nmodel = sm.OLS(y, X).fit()\nregression_line = model.predict(X)\nplt.plot(data.index, regression_line, 'r--', label=\"Regression Line\")\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Krispy Kreme Stock Price (Last Six Months)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as an image file\nfilename = \"app/downloads/Krispy_Kreme_Six_Months.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot the price of Microsoft and Apple together? Can you add a line of best fit for each? Furthermore, can you add information about the lines of best fit?", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"MSFT\", \"AAPL\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as four quarters (three months) ago\nstart_date = end_date - timedelta(days=365)\n\n# Fetch the historical data for Microsoft and Apple using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Set a custom color palette\ncolors = ['#3C6EB4', '#FFB900']\nsns.set_palette(sns.color_palette(colors))\n\n# Calculate the start date as two quarters (six months) ago\nstart_date_two_quarters_ago = end_date - timedelta(days=182)\n\n# Filter the historical data for Microsoft and Apple for the past two quarters \ndata_two_quarters = data[data.index.to_series() > start_date_two_quarters_ago]\n\n# Take our dates as X. Convert datetime to numerical values.\nX = pd.DataFrame((data_two_quarters.index - start_date_two_quarters_ago).days)\n\n# start figure\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\n\n# Plot the \"Close\" price for Microsoft and Apple for the past two quarters\nplt.plot(data.index, data[tickers[0]], label=\"Microsoft (MSFT)\")\nplt.plot(data.index, data[tickers[1]], label=\"Apple (AAPL)\")\n\n# Fit a linear regression model for Microsoft\nregressor_msft = LinearRegression()\nregressor_msft.fit(X, data_two_quarters[tickers[0]])\n\n# Fit a linear regression model for Apple\nregressor_aapl = LinearRegression()\nregressor_aapl.fit(X, data_two_quarters[tickers[1]])\n\n# Predict the stock prices using the linear regression models\npredicted_prices_msft = regressor_msft.predict(X)\npredicted_prices_aapl = regressor_aapl.predict(X)\n\n# Plot the linear regression lines\nplt.plot(data_two_quarters.index, predicted_prices_msft, color='red', linestyle='--', label='MSFT Linear Regression')\nplt.plot(data_two_quarters.index, predicted_prices_aapl, color='blue', linestyle='--', label='AAPL Linear Regression')\n\n# Add information about the lines of best fit\nplt.annotate(f\"MSFT: {regressor_msft.coef_[0]:.2f}\", xy=(data_two_quarters.index[-1], predicted_prices_msft[-1]), xytext=(data_two_quarters.index[-1] - pd.DateOffset(months=1), predicted_prices_msft[-1]), arrowprops=dict(facecolor='black', arrowstyle='->'), fontsize=10)\nplt.annotate(f\"AAPL: {regressor_aapl.coef_[0]:.2f}\", xy=(data_two_quarters.index[-1], predicted_prices_aapl[-1]), xytext=(data_two_quarters.index[-1] - pd.DateOffset(months=1), predicted_prices_aapl[-1]), arrowprops=dict(facecolor='black', arrowstyle='->'), fontsize=10)\n\nplt.title(\"Microsoft and Apple Stock Prices (Last Two Quarters)\", fontsize=16, fontweight='bold', color=\"#333333\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#333333\")\nplt.ylabel(\"Stock Price (USD)\", fontsize=14, color=\"#333333\")\nplt.legend()\n\nplt.tight_layout()\n\nfilename = \"app/downloads/Microsoft_Apple_Two_Quarters.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Disney's volume for the past two blood moons?", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"DIS\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as two blood moons (approximately 59 days) ago\nstart_date = end_date - timedelta(days=59)\n\n# Fetch the historical data for Disney using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the \"Volume\" for Disney for the past two blood moons\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\nplt.plot(data.index, data[\"Volume\"], color='cyan')  # Change color to cyan\n\nplt.title(\"Disney Stock Volume (Past Two Blood Moons)\", fontsize=16, fontweight='bold', color=\"#FFFFFF\")  # Change color to white\nplt.xlabel(\"Date\", fontsize=14, color=\"#FFFFFF\")\nplt.ylabel(\"Volume\", fontsize=14, color=\"#FFFFFF\")\n\nplt.tight_layout() \n\nfilename = \"app/downloads/Disney_Two_Blood_Moons.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Disney's volume for the past two blood moons? Use bars and a white background.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"DIS\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as two blood moons (approximately 59 days) ago\nstart_date = end_date - timedelta(days=59)\n\n# Fetch the historical data for Disney using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the volume for Disney for the past two blood moons using bars\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\nplt.bar(data.index, data[\"Volume\"], color='blue')\n\nplt.title(\"Disney Stock Volume (Past Two Blood Moons)\", fontsize=16, fontweight='bold', color=\"#000000\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#333333\")\nplt.ylabel(\"Volume\", fontsize=14, color=\"#333333\")\n\nplt.tight_layout() \nfilename = \"app/downloads/Disney_Two_Blood_Moons_With_Volume.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Disney's stock price for the past 28 days? Also include bars for volume.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"DIS\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as 28 days ago\nstart_date = end_date - timedelta(days=28)\n\n# Fetch the historical data for Disney using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Disney's brand colors\ncolors = ['#0033CC', '#FF9900']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# start figure\nfig, ax = plt.subplots(figsize=(chart_width, chart_height))\n\n# Plot the \"Close\" price for Disney for the past 28 days\nplt.plot(data.index, data[\"Close\"], label=\"Disney (DIS)\")\n\n# Add bars for volume\nax2 = ax.twinx()\nax2.bar(data.index, data[\"Volume\"], alpha=0.3, width=0.5, align='center', color='#FF9900', label=\"Volume\")\n\nplt.title(\"Disney Stock Price (Past 28 Days)\", fontsize=16, fontweight='bold', color=\"#FFFFFF\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#FFFFFF\")\nplt.ylabel(\"Stock Price (USD)\", fontsize=14, color=\"#FFFFFF\")\nax2.set_ylabel(\"Volume\", fontsize=14, color=\"#FFFFFF\")\nplt.legend()\n\nplt.tight_layout() \n\nfilename = \"app/downloads/Disney_28_Days_with_Volume.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Microsoft's stock price for the past three quarters using candlesticks?", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport mplfinance as mpf\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"MSFT\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as three quarters (nine months) ago\nstart_date = end_date - timedelta(days=365*0.75)\n\n# Fetch the historical data for Microsoft using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Microsoft's brand colors\ncolors = ['#3C6EB4', '#FFB900', '#B4009E', '#00A300']\nsns.set_palette(sns.color_palette(colors))\n\nfilename = \"app/downloads/Microsoft_Candlestick_Three_Quarters.png\"\n# Plot the candlestick chart for Microsoft for the past three quarters\nmpf.plot(data, type='candle', style='yahoo', title=\"Microsoft Stock Price (Last Three Quarters)\",\n         ylabel=\"Stock Price (USD)\", figsize=(chart_width, chart_height), savefig=filename)\n"}
{"prompt": "can you plot Krispy Kreme's stock price for the past six months, as well as volume?", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport mplfinance as mpf\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"DNUT\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as six months ago from today\nstart_date = end_date - timedelta(days=180)\n\n# Fetch the historical data for Krispy Kreme using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a custom color palette inspired by Krispy Kreme's brand colors\ncolors = ['#FF7900', '#E9A600', '#D6D6D6']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the candlestick chart for Krispy Kreme stock price for the past six months\nfilename = \"app/downloads/Krispy_Kreme_Candlestick_Six_Months.png\"\nmpf.plot(data, type='candle', style='yahoo', title=\"Krispy Kreme Stock Price (Last Six Months)\", ylabel=\"Stock Price (USD)\",\n         figsize=(chart_width, chart_height), savefig=dict(fname=filename, dpi=300, bbox_inches='tight'), volume=True)\nplt.close()\n"}
{"prompt": "plot Google's stock price chart for the past two weeks using 5-minute data. Then show a line of best fit. Use a dark theme, red for the graph, and green for the line of best fit.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nimport statsmodels.api as sm\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"GOOGL\"\n\n# Get today's date and time\nend_date = datetime.today()\n\n# Calculate the start date as two weeks ago from today\nstart_date = end_date - timedelta(days=14)\n\n# Fetch the intraday data for Google using yfinance with 5-minute interval\ndata = yf.download(ticker, start=start_date, end=end_date, interval='5m',progress=False)\n\n# Set a custom color palette\ncolors = ['#FF0000', '#00FF00']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the stock price for Google for the past two weeks\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data['Close'], color='red', label=\"Stock Price\")\n\n# Generate regression line\nX = np.arange(len(data)).reshape(-1, 1)\nX = sm.add_constant(X)\ny = data['Close'].values\nmodel = sm.OLS(y, X).fit()\nregression_line = model.predict(X)\nplt.plot(data.index, regression_line, color='green', linestyle='--', label=\"Regression Line\")\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Google Stock Price (Past Two Weeks)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as an image file\nfilename = \"app/downloads/Google_Two_Weeks.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "plot Bumble's stock price chart for the past month using 60-minute interval data. Then add a line of best fit of the form y=mx+b. Add the defining function for the line of best fit to the chart. Use a white theme and yellow for the line graph, green for the line of best fit. Make the lines very thick and stamp a big heart on it.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"BMBL\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as one month ago from today\nstart_date = end_date - timedelta(days=30)\n\n# Fetch the historical data for Bumble using yfinance with 60-minute interval\ndata = yf.download(ticker, start=start_date, end=end_date, interval=\"60m\",progress=False)\n\n# Set a white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the stock price for Bumble for the past month\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data['Close'], label=\"Stock Price\", color=\"yellow\", linewidth=3)\n\n# Fit a linear regression model\nX = np.arange(len(data)).reshape(-1, 1)\ny = data['Close'].values\nregressor = LinearRegression()\nregressor.fit(X, y)\nm = regressor.coef_[0]\nb = regressor.intercept_\n\n# Generate the line of best fit\nline_of_best_fit = m * X + b\n\n# Plot the line of best fit\nplt.plot(data.index, line_of_best_fit, 'g--', label=\"Line of Best Fit\", linewidth=3)\n\n# Add the defining function for the line of best fit\ndefining_function = f\"y = {m:.2f}x + {b:.2f}\"\nplt.text(data.index[0], data['Close'].iloc[0], defining_function, fontsize=16, color='green', ha='left', va='bottom')\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Bumble Stock Price (Last Month)\")\n\n# Add a heart stamp on the chart\nplt.text(data.index[-1], data['Close'].iloc[-1], u'❤', fontsize=100, color='red', ha='center', va='center')\n\n# Set legend\nplt.legend()\n\n# Save the plot as an image file\nfilename = \"app/downloads/Bumble_Stock_Price.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "plot Bumble's stock price chart for the past 2 months using 60-minute interval data. Then add a linear line of best fit of the form y=mx+b. Add the defining function for the line of best fit to the chart. Use a black theme and yellow for the line graph, green for the line of best fit. Make the title HUGE and bold. Make the lines very thick and stamp a big heart on it.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport statsmodels.api as sm\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"BMBL\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as 2 months ago from today\nstart_date = end_date - timedelta(days=60)\n\n# Fetch the historical data for Bumble using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date, interval='60m',progress=False)\n\n# Set a custom color palette\ncolors = ['#FFD700', '#008000']\nsns.set_palette(sns.color_palette(colors))\n\n# Set dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the stock price for Bumble for the past 2 months\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data['Close'], label=\"Stock Price\", linewidth=3)\nplt.title(\"Bumble Stock Price (Past 2 Months)\", fontsize=30, fontweight='bold')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\n\n# Generate line of best fit\nX = np.arange(len(data)).reshape(-1, 1)\nX = sm.add_constant(X)\ny = data['Close'].values\nmodel = sm.OLS(y, X).fit()\nregression_line = model.predict(X)\nplt.plot(data.index, regression_line, 'g--', label=\"Line of Best Fit\", linewidth=3)\n\n# Add equation of line of best fit to the chart\nequation = f\"y = {model.params[1]:.2f}x + {model.params[0]:.2f}\"\nplt.text(data.index[1], data['Close'].max(), equation, fontsize=14, color='white', va='top')\n\n# Add a big heart stamp on the chart\nplt.text(data.index[-1], data['Close'].min(), '❤', fontsize=100, color='#FFD700', ha='right', va='bottom')\n\n# Set legend\nplt.legend()\n\n# Save the plot as a .png image file\nfilename = \"app/downloads/Bumble_2_Months.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Match Group, Bumble, and Hello Group (NASDAQ:MOMO) for the past two years? Add a line of best fit and information about the line of best fit. Use a white theme, blue for match group, orange for bumble, and green for hello group.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"MTCH\", \"BMBL\", \"MOMO\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as two years ago from today\nstart_date = end_date - timedelta(days=365*2)\n\n# Fetch the historical data for Match Group, Bumble, and Hello Group using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Set a white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the stock prices for Match Group, Bumble, and Hello Group for the past two years\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data.index, data[tickers[0]], label=\"Match Group (MTCH)\", color=\"blue\")\nplt.plot(data.index, data[tickers[1]], label=\"Bumble (BMBL)\", color=\"orange\")\nplt.plot(data.index, data[tickers[2]], label=\"Hello Group (MOMO)\", color=\"green\")\n\n# Calculate the start date as one year ago from today\nstart_date_one_year_ago = end_date - timedelta(days=365)\n\nfor ticker in tickers:\n    # Fit a linear regression model for the past year\n    X = np.arange(len(data[ticker])).reshape(-1, 1)\n    y = data[ticker].values\n    regressor = LinearRegression()\n    regressor.fit(X, y)\n\n    # Generate the line of best fit for the past year\n    line_of_best_fit = regressor.predict(X)\n\n    # Plot the line of best fit for the past year\n    plt.plot(data.index, line_of_best_fit, linestyle='--', linewidth=2, label=f\"{ticker} Regression Line\")\n\n    # Add information about the regression line\n    equation = f\"y = {regressor.coef_[0]:.2f}x + {regressor.intercept_:.2f}\"\n    plt.text(data.index[-1], data[ticker].iloc[-1], equation, fontsize=10, color='black', ha='right', va='bottom')\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Match Group, Bumble, and Hello Group Stock Prices (Past Two Years)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as a .png image file\nfilename = \"app/downloads/Stock_Prices_Match_Bumble_Hello.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot Match Group, Bumble, and Hello Group (NASDAQ:MOMO) for the past two years? Add a line of regression for the past year for each symbol and information about the regression lines. Use a white theme, blue for match group, orange for bumble, and green for hello group.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport statsmodels.api as sm\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"MTCH\", \"BMBL\", \"MOMO\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as two years ago from today\nstart_date = end_date - timedelta(days=365*2)\n\n# Fetch the historical data for Match Group, Bumble, and Hello Group using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)['Adj Close']\n\n# Set a custom color palette for each stock\ncolors = ['#007BFF', '#FF8800', '#00C851']\nsns.set_palette(sns.color_palette(colors))\n\n# Set white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the stock prices for Match Group, Bumble, and Hello Group for the past two years\nplt.figure(figsize=(chart_width, chart_height))\nfor ticker in tickers:\n    plt.plot(data[ticker], label=ticker)\n\n# Generate regression lines for the past year for each stock\nfor ticker in tickers:\n    stock_data = data[ticker].iloc[-365:]\n    X = np.arange(len(stock_data)).reshape(-1, 1)\n    X = sm.add_constant(X)\n    y = stock_data.values\n    model = sm.OLS(y, X).fit()\n    regression_line = model.predict(X)\n    plt.plot(stock_data.index, regression_line, '--', linewidth=2)\n\n    # Add information about the regression line\n    m = model.params[1]\n    b = model.params[0]\n    defining_function = f\"y = {m:.2f}x + {b:.2f}\"\n    plt.text(stock_data.index[0], stock_data.iloc[0], defining_function, fontsize=12, color='black', ha='left', va='bottom')\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Stock Prices for Match Group, Bumble, and Hello Group (Last Two Years)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as an image file\nfilename = \"app/downloads/Stock_Prices.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "can you plot apples, google's, and Microsoft's stock price for the last four quarters. Add a best fit line for the group for the last two quarters. Use a dark theme, make the lines very thick, white for apple, orange for google, and blue for Microsoft.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"AAPL\", \"GOOGL\", \"MSFT\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as four quarters (one year) ago\nstart_date = end_date - timedelta(days=365)\n\n# Fetch the historical data for Apple, Google, and Microsoft using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Set a dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the stock prices for Apple, Google, and Microsoft for the last four quarters\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data.index, data[tickers[0]], color='white', linewidth=3, label=\"Apple (AAPL)\")\nplt.plot(data.index, data[tickers[1]], color='orange', linewidth=3, label=\"Google (GOOGL)\")\nplt.plot(data.index, data[tickers[2]], color='blue', linewidth=3, label=\"Microsoft (MSFT)\")\n\n# Calculate the start date as two quarters (six months) ago\nstart_date_two_quarters_ago = end_date - timedelta(days=182)\n\n# Filter the historical data for Apple, Google, and Microsoft for the last two quarters\ndata_two_quarters = data[data.index.to_series() > start_date_two_quarters_ago]\n\n# Take our dates as X. Convert datetime to numerical values.\nX = pd.DataFrame((data_two_quarters.index - start_date_two_quarters_ago).days)\n\n# Fit a linear regression model for the group\nregressor_group = LinearRegression()\nregressor_group.fit(X, data_two_quarters.mean(axis=1))\n\n# Predict the stock prices using the linear regression model\npredicted_prices_group = regressor_group.predict(X)\n\n# Plot the linear regression line for the group\nplt.plot(data_two_quarters.index, predicted_prices_group, color='green', linestyle='--', linewidth=3, label='Group Linear Regression')\n\nplt.title(\"Stock Prices for Apple, Google, and Microsoft (Last Four Quarters)\", fontsize=16, fontweight='bold', color=\"#FFFFFF\")\nplt.xlabel(\"Date\", fontsize=14, color=\"#FFFFFF\")\nplt.ylabel(\"Stock Price (USD)\", fontsize=14, color=\"#FFFFFF\")\nplt.legend()\n\nplt.tight_layout()\n\nfilename = \"app/downloads/Stock_Prices_Last_Four_Quarters.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "create a matrix plot using the iris dataset.", "completion": "\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Set the dark background theme\nplt.style.use('dark_background')\n\n# Load the iris dataset from seaborn\niris = sns.load_dataset('iris')\n\n# Create a matrix plot using the iris dataset\nsns.pairplot(iris)\n\n# Save the plot as a .png image\nfilename = \"app/downloads/iris_matrix_plot.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n\n"}
{"prompt": "Plot Tesla's stock price for the past 5 years. For each 12 month period in the date range, add a line of best fit. There should be a total of 5 lines of best fit. Use a white background and a thick red line for Tesla's price.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"TSLA\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as 5 years ago from today\nstart_date = end_date - timedelta(days=365 * 5)\n\n# Fetch the historical data for Tesla using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Set a white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the stock price for Tesla for the past 5 years with a thick red line\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data.index, data, color='red', linewidth=2)\n\n# Calculate the start and end dates for each 12-month period\ndate_ranges = []\ncurrent_date = start_date\nwhile current_date < end_date:\n    next_date = current_date + timedelta(days=365)\n    date_ranges.append((current_date, next_date))\n    current_date = next_date\n\nfor i, (start, end) in enumerate(date_ranges):\n    # Filter the data for the current 12-month period\n    filtered_data = data[(data.index >= start) & (data.index < end)]\n    X = np.arange(len(filtered_data)).reshape(-1, 1)\n    y = filtered_data.values\n\n    # Fit a linear regression model for the current 12-month period\n    regressor = LinearRegression()\n    regressor.fit(X, y)\n\n    # Generate the line of best fit for the current 12-month period\n    line_of_best_fit = regressor.predict(X)\n\n    # Plot the line of best fit for the current 12-month period\n    plt.plot(filtered_data.index, line_of_best_fit, linestyle='--', linewidth=1.5, label=f\"Line of Best Fit {i+1}\")\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Stock Price (USD)\")\nplt.title(\"Tesla Stock Price (Past 5 Years)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as a .png image file\nfilename = \"app/downloads/Tesla_Stock_Price_With_Lines_Of_Best_Fit.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "Plot Tesla's stock price for the past five years. Then add a line to approximate the price using a polynomial of degree 2, 3, and 4.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\nticker = \"TSLA\"\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as five years ago from today\nstart_date = end_date - timedelta(days=5*365)\n\n# Fetch the historical data for Tesla using yfinance\ndata = yf.download(ticker, start=start_date, end=end_date,progress=False)\n\n# Set a dark background theme for the plot using Matplotlib\nplt.style.use('dark_background')\n\n# Plot the stock price for Tesla for the past five years\nplt.figure(figsize=(chart_width, chart_height))\nplt.plot(data['Close'], label=\"Stock Price\", linewidth=3)\nplt.title(\"Tesla Stock Price (Past Five Years)\", fontsize=16, fontweight='bold')\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Stock Price (USD)\", fontsize=14)\n\n# Generate polynomial features of degrees 2, 3, and 4\nX = np.arange(len(data)).reshape(-1, 1)\npoly_features_2 = PolynomialFeatures(degree=2).fit_transform(X)\npoly_features_3 = PolynomialFeatures(degree=3).fit_transform(X)\npoly_features_4 = PolynomialFeatures(degree=4).fit_transform(X)\n\n# Fit linear regression models for each polynomial degree\nregressor_2 = LinearRegression().fit(poly_features_2, data['Close'])\nregressor_3 = LinearRegression().fit(poly_features_3, data['Close'])\nregressor_4 = LinearRegression().fit(poly_features_4, data['Close'])\n\n# Predict the stock prices using the linear regression models\npredicted_prices_2 = regressor_2.predict(poly_features_2)\npredicted_prices_3 = regressor_3.predict(poly_features_3)\npredicted_prices_4 = regressor_4.predict(poly_features_4)\n\n# Plot the polynomial approximations\nplt.plot(data.index, predicted_prices_2, label=\"Degree 2\", linewidth=2)\nplt.plot(data.index, predicted_prices_3, label=\"Degree 3\", linewidth=2)\nplt.plot(data.index, predicted_prices_4, label=\"Degree 4\", linewidth=2)\n\nplt.legend()\nplt.tight_layout()\n\n# Save the plot as a .png image file\nfilename = \"app/downloads/Tesla_Stock_Price_Polynomial_Approximation.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "Plot Apple, Microsoft, Google, Meta's stock price percent change for the past two years. Use a white theme and playful colors. Stamp a large heart on it using unicode.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"AAPL\", \"MSFT\", \"GOOGL\", \"META\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as two years ago from today\nstart_date = end_date - timedelta(days=365*2)\n\n# Fetch the historical data for Apple, Microsoft, Google, and Meta using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Calculate percent change for each stock\npercent_change_data = data.pct_change() * 100\n\n# Set a playful color palette\ncolors = ['#FF4081', '#448AFF', '#FFC107', '#4CAF50']\nsns.set_palette(sns.color_palette(colors))\n\n# Set white background theme for the plot using Matplotlib\nplt.style.use('default')\n\n# Plot the percent change for Apple, Microsoft, Google, and Meta for the past two years\nplt.figure(figsize=(chart_width, chart_height))\nfor ticker in tickers:\n    plt.plot(percent_change_data.index, percent_change_data[ticker], label=ticker)\n\n# Add a large heart stamp on the chart\nplt.text(percent_change_data.index[-1], percent_change_data.max().max(), '❤', fontsize=200, color='black', ha='right', va='top')\n\n# Set plot labels and title\nplt.xlabel(\"Date\")\nplt.ylabel(\"Percent Change\")\nplt.title(\"Stock Price Percent Change for Apple, Microsoft, Google, and Meta (Last Two Years)\")\n\n# Set legend\nplt.legend()\n\n# Save the plot as an image file\nfilename = \"app/downloads/Stock_Price_Percent_Change.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "Plot Apple, Google, Meta, and Microsofit's stock price on a chart. Standardize the results and add a line of best fit for the group. Use playful colors and a large font for the title. Make the font for the axis text larger as well.", "completion": "\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nfrom sklearn.linear_model import LinearRegression\n\n# DO NOT CHANGE THIS SECTION\nchart_width = 12\nchart_height = 8\n\ntickers = [\"AAPL\", \"GOOGL\", \"FB\", \"MSFT\"]\n\n# Get today's date\nend_date = datetime.today()\n\n# Calculate the start date as one year ago from today\nstart_date = end_date - timedelta(days=365)\n\n# Fetch the historical data for Apple, Google, Meta, and Microsoft using yfinance\ndata = yf.download(tickers, start=start_date, end=end_date,progress=False)[\"Close\"]\n\n# Standardize the stock prices\nstandardized_data = (data - data.mean()) / data.std()\n\n# Set a playful color palette\ncolors = ['#FF0000', '#00FF00', '#0000FF', '#FF00FF']\nsns.set_palette(sns.color_palette(colors))\n\n# Set plot style and size\nplt.style.use('default')\nplt.figure(figsize=(chart_width, chart_height))\n\n# Plot the standardized stock prices for Apple, Google, Meta, and Microsoft\nfor ticker in tickers:\n    plt.plot(standardized_data.index, standardized_data[ticker], label=ticker)\n\n# Fit a linear regression model\nX = np.arange(len(standardized_data)).reshape(-1, 1)\ny = standardized_data.mean(axis=1).values\nregressor = LinearRegression()\nregressor.fit(X, y)\n\n# Generate the line of best fit for the group\nline_of_best_fit = regressor.predict(X)\n\n# Plot the line of best fit\nplt.plot(standardized_data.index, line_of_best_fit, 'k--', label='Line of Best Fit')\n\n# Set plot labels and title\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Standardized Stock Price\", fontsize=14)\nplt.title(\"Standardized Stock Prices of Apple, Google, Meta, and Microsoft\", fontsize=24, fontweight='bold')\n\n# Set font size for tick labels\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Set legend\nplt.legend()\n\n# Save the plot as a .png image file\nfilename = \"app/downloads/Stock_Prices_Apple_Google_Meta_Microsoft.png\"\nplt.savefig(filename, dpi=300, bbox_inches='tight')\nplt.close()\n"}
{"prompt": "\n\nfilename:\n```\napp/downloads/sample_data.csv\n```\n\ncolumns:\n```\nPerson               int64\nAge                  int64\nHeight (cm)          int64\nWeight (kg)          int64\nIncome ($)           int64\nEducation (years)    int64\ndtype: object\n```\n\nrequest:\n```\nSplit the data into test and training datasets, then create a machine-learning model with at least 1 hidden layer using keras to predict income based on the other factors. Test on the test dataset and print the results of the test.\n```\n\n", "completion": "\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Assuming your data is in a DataFrame called `data`\nX = data.drop('Income ($)', axis=1)\ny = data['Income ($)']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create a machine-learning model with 1 hidden layer\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_dim=X_train_scaled.shape[1]))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Train the model\nmodel.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)\n\n# Evaluate the model on the test set\nloss = model.evaluate(X_test_scaled, y_test)\n\nprint(\"Test Loss:\", loss)\n\n"}
